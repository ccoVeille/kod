// Code generated by "kod generate". DO NOT EDIT.
//go:build !ignoreKodGen

package redis

import (
	"context"
	"github.com/go-kod/kod"
	"github.com/go-kod/kod/interceptor"
	"github.com/redis/go-redis/v9"
	"reflect"
)

func init() {
	kod.Register(&kod.Registration{
		Name:      "github.com/go-kod/kod/examples/infra/redis/Component",
		Interface: reflect.TypeOf((*Component)(nil)).Elem(),
		Impl:      reflect.TypeOf(impl{}),
		Refs:      ``,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			var interceptors []kod.Interceptor
			if h, ok := info.Impl.(interface{ Interceptors() []kod.Interceptor }); ok {
				interceptors = h.Interceptors()
			}

			return component_local_stub{
				impl:        info.Impl.(Component),
				interceptor: interceptor.Chain(interceptors),
				name:        info.Name,
			}
		},
	})
}

// kod.InstanceOf checks.
var _ kod.InstanceOf[Component] = (*impl)(nil)

// Local stub implementations.

type component_local_stub struct {
	impl        Component
	name        string
	interceptor kod.Interceptor
}

// Check that component_local_stub implements the Component interface.
var _ Component = (*component_local_stub)(nil)

func (s component_local_stub) Client() (r0 *redis.Client) {

	if s.interceptor == nil {
		r0 = s.impl.Client()
		return
	}

	call := func(ctx context.Context, info kod.CallInfo, req, res []any) (err error) {
		r0 = s.impl.Client()
		res[0] = r0
		return
	}

	info := kod.CallInfo{
		Impl:       s.impl,
		Component:  s.name,
		FullMethod: "github.com/go-kod/kod/examples/infra/redis/Component.Client",
		Method:     "Client",
	}

	ctx := context.Background()
	_ = s.interceptor(ctx, info, []any{}, []any{r0}, call)
	return
}
